ItÅ› important to know that when we call the setState method we give the control to the React library to update the state, but it doesn't do it inmediatly.
let say that we have this code:

handleClick = () => {
    this.setState({this.state.counter: this.state.counter + 1});
    console.log(this.state.counter)
}

so if the counter starts in 0 and then we click a button to increment the counter, and that counter is being rendered on the browser we'll notice that in the browser the value is updated, but in the console we will always be one behind, and this is because it executes the line of setState but it does asynchronously and it takes some time for getting the result, but after executing that line, it consoles log the value.

so in order to fix this issue, the setState has a solution, it can takes a second parameter which is a callback, and then we can explicitly say what do we want to do,after we get the result:

handleClick = () => {
    this.setState({this.state.counter: this.state.counter + 1}, () => {
        console.log(this.state.counter)
    })
}

There's another trick when using setState, if for some reason you need the previousState or props for updating the new value, we can pass in the first parameter, instead an object, with the new value that we want to update, a function, that takes 2 params, prevState, and prevProps:

handleClick = () => {
    (prevState, prevProps) => {
        return { counter: prevState.counter + 1 }
    }, () => {
        console.log(this.state.counter)
    }
}

The rule is this:

Do we want to manipulate or use the state after an update?
    - Then we need to add the second parameter to the setState method which is a callback that is executed after the setState has finished.

Do we need the state or props as a parte of the calculation of the new state, then we can pass in the first parameter a function that takes as parameters the prevState and the prevProps